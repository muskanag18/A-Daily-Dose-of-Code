Link for the problem - https://leetcode.com/problems/merge-k-sorted-lists/

I DID USING PRIORITY QUEUE

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        if(lists.size() == 0)
            return NULL;
        
        if(lists.size() == 1)
            return lists[0];
        
        int n = lists.size();
        priority_queue<int, vector<int>, greater<int>> p;
        for(int i=0;i<n;i++)
        {
            while(lists[i] != NULL)
            {
                p.push(lists[i]->val);
                lists[i] = lists[i]->next;
            }
        }
        
        if(!p.empty()){
        ListNode* ptr = new ListNode(p.top());
        ListNode* root = ptr;
        p.pop();
        while(!p.empty())
        {
            ListNode* cpt = new ListNode(p.top());
            p.pop();
            ptr->next = cpt;
            ptr = cpt;
        }
        ptr->next = NULL;
        return root;   
        }
        return NULL;
    }
};

TIME COMPLEXITY - O(n log k)
SPACE COMPLEXITY - O(n)

THERE ARE OTHER APPROACHES TOO, KINDLY REFER!
